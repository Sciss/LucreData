algorithm "minimum empty rectangle search"
- given a point 'q' whose location is unknown, but for which
  a function 'compare( p, q, i_d)' exists which compares
  the coordinates of p and q in dimension axis 1 <= i_d <= d,
  yielding -1 for q < p, 0 for q == p, and 1 for q > p,
  find the smallest rectangle r_res in the quadtree which
  contains q

- r_res = root square
- beginne im root quadrat in Ql
- for each quadrant, test whether q_res overlaps _the quadrant bounds_
  (i.e. no matter whether it contains a node, a point, or is empty)
  --> = def. of interesting square
- wenn #interesting squares is != 1, return and push the interesting squares onto the prio
- wenn #interesting squares is == 1
      step $
        - if quadrant contains a node -> descend into the node
        - if quadrant is empty -> if it exists, go to Qi-1 and repeat from $
        - if quadrant contains leaf ->
              narrow r_res with respect to the point in that leaf, then:
              if it exists, go to Qi-1 and repeat from $

regarding nn:
- for the special case of a follow-up nn for e.g. north-west chebychev distance based
  metric, we directly have the result from the points delimiting r_res!
- it thus remains to establish the time bounds for the above algorithm

-----
( a remotely related problem:
H. Kaplan and M. Sharir, Finding the Maximal Empty Rectangle Containing a Query Point (arXiv:1106.3628)
- however they are looking for the largest rectangle which seems much harder
  (they require O(log^4 n) for query)
)

-----------------------------
19-Jul-11

- das funktioniert nicht. wir koennen nicht einfach von Ql nach Q0 laufen
- auf der anderen seite koennen wir keine vernuenftige priority queue anlegen,
  weil sich q-res staendig aendern kann, und als folge dessen keine statische
  minimum oder maximum distanz ordnung moeglich ist
- es gibt aber auch keine technik, von Q0 nach Ql zu laufen
- d.h. ohne weiteres waere die worst case performance O(n)?  :(
- wir muessen also irgendwie die skip struktur ausnutzen
- eine moeglichkeit waere, dass wenn ein interessante node N quadrant
  gefunden wurde, nach Ql zu laufen, das maximale Q, wo die node N
  noch definiert ist. und von dort?
  ; wir muessen vielleicht nur "irgendeinen punkt" in N finden?
  ; d.h. finde die leaves in N in Ql.
  - wenn die zahl 0 ist, waehle einen willkuerlichen quadranten mit
  einer node N' und wiederhole (finde N' in Ql', suche darin nach leaves ec.)
  - wenn die zahl > 0 ist, reduziere das query-rect fuer alle leaves

also nochmal:

(beginne mit root quad in Q0!)

in Q0 : finde die interessanten quadrate in n
- wenn n.child ein leaf ist : reduziere query-rect + refresh found interesting squares (array of size 4)
- wenn n.child node ist : pruefe, ob interessant (n.child.quad.isInteresting (_not_ n.quad.quadrant( i )!))
- dann:
     fuer jede interessante sub-node n':
        - ** finde n' in Qmax.
        - finde die leaves von n' dort
              - zahl der leaves >= 1 : reduziere query-rect + refresh found interesting squares
              - zahl der leaves == 0 : waehle willkuerliche sub-node n'' von n' und wiederhole **

(refinement: finde die leaves von n', die im query-rect liegen!)
d.h. also nicht: finde n' in Qmax, sondern finde n' im hoechsten Qx wobei mindestens ein relevantes leaf
oder relevante node enthalten sind; letzteres garantiert allerdings nicht, dass diese node tatsaechlich
ein relevantes leaf irgendwo enthaelt

vollkommen fraglich, um uns dieser algorithmus ein gutes performance bound liefert ...

::::::::::::

!!! eigentlich waere es vielleicht ausreichend und einfacher zwei binaere suchen in den total orders zu machen
= O(log n) + O(log n) ?
; nun ist total-order zunaechst eine linked-list, d.h. binaer suche funzt niet
; koennte man also noch zusaetzlich eine skip-list anlegen
