before

1-5---------9
: |         |
: 3----5    7-----9
: |    |    |     |
: 2-3  4-5  6-7   8-9



step-1 -- no way

     1-9
       |
       7-----9
|      |     |
3-4    6-7   8-9


bottom-up

1-5------9
  |      |
  4---5  7-----9
  |      |     |
  3      6-7   8-9

1-5------9
  |      |
  4---5  7-----9
  |      |     |
  3      6-7   8-9


:::::::::::::::::::

1-5---------9
: |         |
: 3----5    7-----9
: |    |    |     |
: 2-3  4-5  6-7   8-9

1-5------9
: |      |
: 5      7-----9
: |      |     |
: 2-3-5  6-7   8-9

1-9
: |
: 5------7-----9
: |      |     |
: 2-3-5  6-7   8-9

:::::::::::::::::::

1-9
: |
: 3----7------9
: |    |      |
: 2-3  5-6-7  8-9

:::::::::::::::::::

with this:

1-5---------9
: |    V    |
: 3----5    7-----9
: |    |    |     |
: 2-3  4-5  6-7   8-9

remove 4. step 1:

pp h				0
p  1-5---------9		1
   : |    V    |
b  : 3----5    7-----9		2
   : |    |    |     |
   : 2-3  4-5  6-7   8-9	3

--> merge right, 5 down ; hence recreate p, and write it into pp
(merge 2, shrink 1, update 0)

   h				0
pp 1-9				1
   : |
p  : 3----5----7-----9		2
   : |    |    |     |
l  : 2-3  4-5  6-7   8-9	3

--> merge 5, delete 4 ; hence recreate p, and write it into pp
(merge 3, shrink 2, update 1)


   h
   1-9
   : |
   : 3----7------9
   : |    |      |
   : 2-3  5-6-7  8-9

that is to say, when the key is not in the upper levels,
we need to cache one level of node-recreation
(in the first step, the 'merge 2' is delayed)

ok, what happens when the search key appears in upper levels?

remove 5:

p  h				0
b  1-5---------9		1
  : |         |
  : 3----5    7-----9		2
  : |    |    |     |
  : 2-3  4-5  6-7   8-9		3

--> remove 5 from 1 ? or ignore for now ?

pp h				0
p  1-5---------9		1
   : |         |
b  : 3----5    7-----9		2
   : |    |    |     |
   : 2-3  4-5  6-7   8-9	3

--> in 2, remove 5 and merge right (delayed!) / in 1 update, in 0 write

   h				0
pp 1-9				1
   : |
p  : 3---(5)...7-----9		2
   : |    |    |     |
l  : 2-3  4-5  6-7   8-9	3

--> in 3, remove 5 and merge right / execute delayed stuff in 2 and write in 1

einfach gesagt, muss es kein delay im sinne der analyse geben; lediglich der down-index muss
bestimmt werden in 'b', aber nicht die size ueberprueft werden. statt dessen wird 'p'
geprueft. // stimmt nicht, die analyse muss schon vollzogen werden in 'b', weil davon
die genau aktion in 'p' abhaengt

::::::::::::: with borrow-right

p  h				0
b  1-5---------11		1
   : |         |
   : 3----5    7-----9----11	2
   : |    |    |     |    |
   : 2-3  4-5  6-7   8-9  10-11	3

--> 5 found. schedule mod (remove '5')
; more like this: remove at idx = found || down-child shrinks

pp h				0
p  1-5---------11		1
   : |         |
b  : 3----5    7-----9----11	2
   : |    |    |     |    |
   : 2-3  4-5  6-7   8-9  10-11	3

--> 5 found. 



:::::::::::::

p  h					0
b  1-5---------11			1
   : |         |
   : 3----5    8-----10-----12		2
   : |    |    |      |     |
   : 2-3  4-5  6-7-8  9-10  11-12	3

remove 5:

p  h					0
b  1-8-------------11			1
   : |             |
   : 3----8        10-----12		2
   : |    |        |      |
   : 2-3  4-6-7-8  9-10  11-12		3


::: the problem is that when removing a key which is spread over several levels, another one gets promoted more than once. hence the only solution without multiple node re-creations is to go bottom-up.

:::

it seems though that we _can_ do top-down with the pp / p / b knowledge

"When we go down on the found query node, we _force_ a merge, borrow!"

--> however, couldn't there be a case where this is not possible without overflowing the down node? that case would be the one where borrow is not possible due to the right/left sibling becoming underfull; thus a merge would be required and that could leed to overfull node despite removing the found node?

ex: 1-3 skip tree (2 <= arrsize <= 4)

47-73--------------M
   |               |
   54 63 67 73     85 M

--> merge right ok (after removing 73 yields array of size 4)

how about 2-5 skip tree (3 <= arraysize <= 6)

11-73------------------M
   |                   |
   20 30 40 50 60 73   80 90 M

borrow right is not possible
merge right would yield 20 30 40 50 60 80 90 M which is overfull

; however we could also fall into 'M' and do a left-borrow here, yielding

11-73-----------------M
   |                  |
   20 30 40 50 60   (73) 80 90 M

; so what about the case where both siblings have minimum size?

11-73---------M
   |          |
   50 60 73   80 90 M

; that's no problem - we can do the right-merge

; what about the case where there is no right sibling?
--> can't occur, because we cannot remove 'M', and if
the search key ever appears rightmost, it has been guaranteed
that we gone down on the search key before, performing the
necessary borrow!

:::::

entonces the algorithm
----------------------

- let the search key be k
- in current virtual branch b', find the index
  of where to drop idxP. let found indicate whether
  the drop key equals the k.
- if not found
     this implies that the down node cannot have 'k'
     as final element! it also implies that b' == b
     (it wasn't virtualised).
     check if down-node is has minimum size
     - if yes, perform the merge/borrow (as in the original
     algorithm)

- if key found
     define rsib the right sibling of the down node c.
     (since removal of M is forbidden, such sibling exists in b')
     create the virtual child branch c' according to the following criteria:
     - if both c and rsib have minimum size, c' is the merge of both
       (k will be removed in the next step; the size of c here is
        taken by subtracting 1 in anticipation of that removal!)
       ; actualise b' to bNew by removing the entry corresponding to 'k'
       ; the down-ref passed into the next step is the one that was pointing
         to rsib
     - otherwise
        - if c is larger than rsib, borrow the last element of
          c (which is k!) to rsib ('borrow-to-right').
          ; actualise b' to bNew by overwriting the key 'k' with the new
          right-most key in c'. pass the down-ref that was pointing to c
          to the next step.
        - if rsib is larger than c, borrow the first element 'x' of
          rsib to c ('borrow-to-left')
          ; actualise b' to bNew by overwriting the key 'k' with the new
          right-most key in c', 'x'. pass the down-ref that was pointing to rsib
          to the next step.

- then write the actualised bNew (if necessary) into the down-ref passed into this iteration

Note that the number of nodes re-written doesn't change. E.g. in l5.pdf, in the
original algorithm 4 nodes are rewritten ([47 73 M], [54 63 73], [59 62 63], [69 73]).
In the new algorithm, the nodes rewritten are ([47 73 M], [54 63 73], [85 92 M] (!), [69 73]).
; not true: in the new one, also the borrowed-to-left [74 76 78 85] is rewritten (it borrows
74 to [69 (73)]). however, in the original algorithm nodes are rewritten more than once,
thus the total number of rewritings is not higher (maybe even less??)

let's see the vertical motions.... original algorithm:
 Lvl down: 63
 Lvl up:   62
(Lvl down: 73)
 Lvl up:   69
(Lvl down: 73)
 Lvl up:   69

new algorithm:
(Lvl down: 73)
 Lvl up:   85
(Lvl down: 73)

-- at least in this example significantly less motion!
(it seems the new algorithm has on average a slightly higher filling ratio)


      /*
       * In merge-with-right, the right sibling's
       * identifier is re-used for the merged node.
       * Thus after the merge, the originating sibling
       * should be disposed (when using an ephemeral
       * datastore). The parent needs to remove the
       * entry of the originating sibling.
       *
       * (thus the disposal corresponds with the ref
       * removed from the `downs` array)
       */
      private case object ModMergeRight      extends ModSome

      /*
       * In borrow-from-right, both parents' downs need
       * update, but identifiers are kept.
       * the parent needs to update the key for the
       * originating sibling to match the first key in
       * the right sibling (or the new last key in the
       * originating sibling).
       */
      private case object ModBorrowFromRight extends ModSome

      /*
       * In merge-with-left, the originating sibling's
       * identifier is re-used for the merged node.
       * Thus after the merge, the left sibling
       * should be disposed (when using an ephemeral
       * datastore). The parent needs to remove the
       * entry of the left sibling.
       *
       * (thus the disposal corresponds with the ref
       * removed from the `downs` array)
       */
      private case object ModMergeLeft       extends ModSome

      /*
       * In borrow-from-left, both parents' downs need
       * update, but identifiers are kept.
       * the parent needs to update the key for the
       * left sibling to match the before-last key in
       * the left sibling.
       */
      private case object ModBorrowFromLeft  extends ModSome

      /**
       * Borrow-to-right is a special case encountered when
       * going down from a branch containing the search node,
       * where the child cannot be merged to the right.
       * Instead of merging to the left, or borrowing from
       * the left which would keep the query key in the
       * right-most position, causing successive update
       * problems, we hereby achieve that the query key
       * ends up in a position that is not the last in
       * any node: We remove the query key -- the right
       * most entry -- from the originating sibling and
       * prepend it to its right sibling.
       *
       * Like in a normal borrow, both parents' downs need
       * update, but identifiers are kept. The parent needs
       * to update the key for the originating sibling to
       * match the before-last key in the originating sibling
       * (or the new last key in the new originating sibling).
       */
 
thus, there are only two necessary calls

remove( idx ) --> remove the entry at idx and dispose the down ref's identifier
updateKey( idx, newKey )
